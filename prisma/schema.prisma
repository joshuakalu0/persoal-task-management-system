generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  password       String
  emailVerified  DateTime?
  image          String?
  isVerified     Boolean         @default(false)
  role           UserRole        @default(USER)
  avatarUrl      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  auditLogs      AuditLog[]
  comments       Comment[]
  notifications  Notification[]
  ownedProjects  Project[]       @relation("ProjectOwner")
  projectMembers ProjectMember[]
  sessions       Session[]
  tasksCreated   Task[]          @relation("TasksCreated")
  tasksAssigned  Task[]          @relation("TaskAssignee")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Project {
  id            String          @id @default(cuid())
  name          String
  description   String
  color         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ownerId       String
  auditLogs     AuditLog[]
  notifications Notification[]
  owner         User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members       ProjectMember[]
  tasks         Task[]
}

model ProjectMember {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  projectId String
  userId    String
  role      MemberRole @default(MEMBER)
  joinedAt  DateTime   @default(now())
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(NORMAL)
  dueDate      DateTime?
  progress     Int?
  projectId    String
  creatorId    String
  parentTaskId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attachments  Attachment[]
  comments     Comment[]
  creator      User         @relation("TasksCreated", fields: [creatorId], references: [id])
  parentTask   Task?        @relation("SubtaskRelation", fields: [parentTaskId], references: [id])
  subtasks     Task[]       @relation("SubtaskRelation")
  project      Project      @relation(fields: [projectId], references: [id])
  assignees    User[]       @relation("TaskAssignee")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id         String   @id @default(uuid())
  url        String
  type       String
  taskId     String
  uploadedAt DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  metadata  Json
  projectId String
  userId    String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
