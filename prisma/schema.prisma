// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String
  password        String
  emailVerified   DateTime?
  image           String?
  isVerified      Boolean     @default(false)
  role            UserRole    @default(USER)
  avatarUrl       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accounts        Account[]
  sessions        Session[]
  ownedProjects   Project[]   @relation("ProjectOwner")
  projectMembers  ProjectMember[]
  tasksAssigned   Task[]      @relation("TaskAssignee")
  comments        Comment[]
  notifications   Notification[]
  auditLogs       AuditLog[]
  tasksCreated    Task[]      @relation("TasksCreated")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  USER
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String
  color         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownerId       String
  owner         User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  members       ProjectMember[]
  tasks         Task[]
  notifications Notification[]
  auditLogs     AuditLog[]
}

model ProjectMember {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        MemberRole @default(MEMBER)
  joinedAt    DateTime @default(now())
  @@unique([projectId, userId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Task {
  id           String      @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus  @default(TODO)
  priority     TaskPriority @default(NORMAL)
  dueDate      DateTime?
  progress     Int?
  projectId    String
  creatorId    String
  parentTaskId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  project      Project     @relation(fields: [projectId], references: [id])
  creator      User        @relation("TasksCreated", fields: [creatorId], references: [id])
  assignees    User[]      @relation("TaskAssignee")
  comments     Comment[]
  attachments  Attachment[]
  subtasks     Task[]      @relation("SubtaskRelation")
  parentTask   Task?       @relation("SubtaskRelation", fields: [parentTaskId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  type      String
  taskId    String
  uploadedAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  projectId  String
  title      String
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  metadata   Json
  projectId  String
  userId     String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
}